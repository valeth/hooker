#!/usr/bin/env ruby
# frozen_string_literal: true

require "childprocess"

ARGV.first&.split(".") || []

IMAGE_NAME = "registry.gitlab.com/valeth/hooker"

class String
  def int?
    /^\d+$/.match?(self)
  end
end

class InvalidVersion < StandardError
  def initialize
    super("Requires version of format x.y.z")
  end
end

def validate_version(version)
  semver = version&.split(".")
  raise InvalidVersion unless semver&.size == 3
  raise InvalidVersion unless semver&.all?(&:int?)
  semver.map.with_index { |_v, i| semver[0..i].join(".") }
end

def build_tags(version)
  ["latest", *validate_version(version)]
end

def docker(*args)
  ChildProcess.build("docker", *args).tap do |p|
    p.io.stdout = $stdout
    p.io.stderr = $stderr
    p.start
    p.wait
  end
end

def docker_build(image_name, versions)
  tags = versions.flat_map { |v| ["-t", "#{image_name}:#{v}"] }
  puts "Building #{versions.size} images..."
  docker "build", *tags, "."
end

def docker_push(image_name, versions)
  puts "Pushing #{versions.size} images to #{image_name}"
  versions.each do |version|
    docker "push", "#{image_name}:#{version}"
  end
end

def main(args)
  exit(1) if args.empty?

  case args.first
  when "build"
    docker_build(IMAGE_NAME, build_tags(args[1]))
  when "push"
    docker_push(IMAGE_NAME, build_tags(args[1]))
  else
    tags = build_tags(args.first)
    docker_build(IMAGE_NAME, tags)
    docker_push(IMAGE_NAME, tags)
  end
rescue InvalidVersion => e
  warn e.message
  exit 1
end


main(ARGV)

